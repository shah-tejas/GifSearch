{"version":3,"sources":["components/Hit.js","components/Hits.js","components/CustomSearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Image","src","alt","data-clipboard-text","className","fontSize","Hit","title","link","formattedLink","substring","indexOf","useImage","srcList","useSuspense","isLoading","type","color","height","width","connectHits","hits","map","hit","key","objectID","connectSearchBox","currentRefinement","refine","TextField","label","variant","value","onChange","e","target","fullWidth","searchClient","algoliasearch","App","InstantSearch","indexName","autoFocus","searchAsYouType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAOMA,EAAQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IAClB,OACI,6BACI,kBAAC,IAAD,CAAWC,sBAAqBF,EAAKG,UAAU,aAC3C,yBAAKH,IAAKA,EAAKC,IAAKA,IACpB,yBAAKE,UAAU,WACX,kBAAC,IAAD,CAAgBC,SAAS,cA8B9BC,EAtBH,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACZC,EAAgBD,EAAKE,UAAUF,EAAKG,QAAQ,4BADrB,EAEJC,mBAAS,CAC9BC,QAASJ,EACTK,aAAa,IAFVb,EAFsB,EAEtBA,IAAKc,EAFiB,EAEjBA,UAIZ,OACI,yBAAKX,UAAU,gBAEPW,EACA,kBAAC,IAAD,CACIC,KAAK,WACLC,MAAM,UACNC,OAAQ,GACRC,MAAO,KAEX,kBAAC,EAAD,CAAOlB,IAAKA,EAAKC,IAAKK,MCtBvBa,G,MAAAA,aAVF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZ,OACI,yBAAKjB,UAAU,iBACViB,EAAKC,KAAI,SAAAC,GAAG,OACT,kBAAC,EAAD,CAAKC,IAAKD,EAAIE,SAAUlB,MAAOgB,EAAI,qBAAiBf,KAAMe,EAAI,8B,kBCU/DG,G,MAAAA,aAdS,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,kBAAmBC,EAAY,EAAZA,OACzC,OACI,yBAAKxB,UAAU,WACX,kBAACyB,EAAA,EAAD,CACIC,MAAM,cACNC,QAAQ,WACRC,MAAOL,EACPM,SAAU,SAACC,GAAON,EAAOM,EAAEC,OAAOH,QAClCI,WAAS,SCNnBC,G,MAAeC,IAAc,aAAc,qCAelCC,MAbf,WACE,OACE,yBAAKnC,UAAU,OACb,yBAAKA,UAAU,SAAf,eACA,iEACA,kBAACoC,EAAA,EAAD,CAAeH,aAAcA,EAAcI,UAAU,SACnD,kBAAC,EAAD,CAAiBC,WAAS,EAACC,iBAAiB,IAC5C,kBAAC,EAAD,SCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.99593b85.chunk.js","sourcesContent":["import React from 'react'\nimport {useImage} from 'react-image'\nimport './Hit.css';\nimport Loader from 'react-loader-spinner';\nimport Clipboard from 'react-clipboard.js';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\n\nconst Image = ({ src, alt }) => {\n    return (\n        <div>\n            <Clipboard data-clipboard-text={src} className=\"gifButton\">\n                <img src={src} alt={alt} />\n                <div className=\"overLay\">\n                    <AssignmentIcon fontSize=\"large\" />\n                </div>\n            </Clipboard>\n        </div>\n        \n    )\n}\n\nconst Hit = ({ title, link }) => {\n    const formattedLink = link.substring(link.indexOf('https://media.giphy.com'));\n    const {src, isLoading} = useImage({\n        srcList: formattedLink,\n        useSuspense: false\n    });\n    return (\n        <div className=\"hitContainer\">\n            {\n                isLoading ?\n                <Loader\n                    type=\"TailSpin\"\n                    color=\"#00BFFF\"\n                    height={80}\n                    width={80}\n                /> :\n                <Image src={src} alt={title} />\n            }\n        </div>\n    );\n}\n\nexport default Hit;\n","import React from 'react';\nimport { connectHits } from 'react-instantsearch-dom';\nimport Hit from './Hit';\nimport './Hits.css';\n\nconst Hits = ({ hits }) => {\n    return (\n        <div className=\"hitsContainer\">\n            {hits.map(hit => (\n                <Hit key={hit.objectID} title={hit['GIPHY â€‹Title']} link={hit['Web Archive Link']} />\n            ))}\n        </div>\n    );\n}\n\nexport default connectHits(Hits);\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { connectSearchBox } from 'react-instantsearch-dom';\nimport './CustomSearchBox.css';\n\nconst CustomSearchBox = ({currentRefinement, refine}) => {\n    return (\n        <div className=\"textBox\">\n            <TextField \n                label=\"Search GIFs\" \n                variant=\"outlined\" \n                value={currentRefinement}\n                onChange={(e) => {refine(e.target.value)}}\n                fullWidth\n            />\n        </div>\n    );\n}\n\nexport default connectSearchBox(CustomSearchBox);\n","import React from 'react';\nimport algoliasearch from 'algoliasearch/lite';\nimport { InstantSearch } from 'react-instantsearch-dom';\nimport Hits from './components/Hits';\nimport CustomSearchBox from './components/CustomSearchBox';\nimport './App.css';\n\nconst searchClient = algoliasearch('0RDP6I1JSB', '30cfaf989bcf8a1885f112de273eb0ed');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"title\">Search GIFs</div>\n      <p>(Click on the gif to copy the url)</p>\n      <InstantSearch searchClient={searchClient} indexName=\"giphy\">\n        <CustomSearchBox autoFocus searchAsYouType={false} />\n        <Hits />\n      </InstantSearch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}